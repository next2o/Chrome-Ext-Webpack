{"version":3,"file":"background.js","mappings":"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","sources":["webpack://chrome-ext/./node_modules/uuid/dist/esm-browser/native.js","webpack://chrome-ext/./node_modules/uuid/dist/esm-browser/rng.js","webpack://chrome-ext/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://chrome-ext/./node_modules/uuid/dist/esm-browser/v4.js","webpack://chrome-ext/./src/background.js"],"sourcesContent":["const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import {v4 as uuidv4} from 'uuid';\n\nchrome.runtime.onMessage.addListener(\n  (request, sender, sendResponse) => {\n    if (request.message === \"get_current_tab_url\") {\n      try {\n        chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {\n          if (!tabs || !tabs.length) {\n            console.log(\"Error: No active tab found\");\n            sendResponse({error: \"Error: No active tab found\"});\n            return;\n          }\n          const url = tabs[0].url;\n          if(!url) throw new Error(\"tabs[0].url is undefined\");\n          // Check if the URL is valid\n          const parsedUrl = new URL(url);\n          try {\n          // Check if the URL is an internal page\n            if (parsedUrl.protocol !== \"https:\" && parsedUrl.protocol !== \"http:\") {\n              throw new Error(`Cannot set cookie for internal page: ${url}`);\n            } \n            \n          } catch(err) {\n            console.log(`Error handling response: ${err}`);\n            sendResponse({error: err.message});\n            return;\n          }\n          let responseData = {url, domain: parsedUrl.hostname};\n          const sixMonthsInMilliseconds = 15778476000;\n          const expirationDate = new Date(Date.now() + sixMonthsInMilliseconds);\n\n          chrome.cookies.get({url: url, name: \"userId\"}, (cookie) => {\n            let userId;\n            if (cookie) {\n              userId = cookie.value;\n            } else {\n              userId = uuidv4();\n              // generate a new unique value here\n            }\n            responseData.userId = userId;\n            console.log(cookie);\n            // Set the cookie here\n            chrome.cookies.set({\n              url: url,\n              name: \"userId\",\n              value: userId,\n              httpOnly: true,\n              expirationDate: Math.floor(expirationDate.getTime()/1000),\n              domain: parsedUrl.hostname\n            }, async (cookie)=>{\n              if (chrome.runtime.lastError) {\n                sendResponse({error: chrome.runtime.lastError.message});\n                console.log(chrome.runtime.lastError.message)\n              }\n              sendResponse(responseData);\n            });\n          });\n        });\n      } catch (error) {\n        console.log(`Error handling response: ${error}`);\n        sendResponse({error: error.message});\n      }\n    }\n    return true; // Required for async message sending to close the message sending\n  });\n"],"names":["randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","options","buf","offset","rnds","random","arr","toLowerCase","unsafeStringify","chrome","runtime","onMessage","addListener","request","sender","sendResponse","message","tabs","query","active","currentWindow","length","console","log","error","url","parsedUrl","URL","protocol","err","responseData","domain","hostname","expirationDate","Date","now","cookies","get","name","cookie","userId","value","set","httpOnly","Math","floor","getTime","async","lastError"],"sourceRoot":""}