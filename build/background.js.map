{"version":3,"file":"background.js","mappings":"MAIA,IAAIA,EACJC,OAAOC,QAAQC,YAAYC,aAAY,WACrCH,OAAOI,SAASC,mBAAmB,CAAC,cAAiB,QAAQ,SAASC,GACpEP,EAAQO,EAAKP,MACb,IAAIQ,EAAc,CAAC,EACnBC,QAAQC,IAAIH,GACZC,EAAYG,KAAKC,UAAUL,GAC3BE,QAAQC,IAAIF,EACd,GACF,G","sources":["webpack://chrome-ext/./src/background.js"],"sourcesContent":["//import {v4 as uuidv4} from 'uuid';\r\n\r\n//fetch if user sync is not enabled by adding \"accountStatus\" param\r\n//may need to be inside try block for legacy chrome users - otherwise it returns empy object for non-synced accounts\r\nlet email;\r\nchrome.runtime.onInstalled.addListener(function () {\r\n  chrome.identity.getProfileUserInfo({'accountStatus': 'ANY'}, function(info) {\r\n    email = info.email;\r\n    let information = {};\r\n    console.log(info);\r\n    information=JSON.stringify(info);\r\n    console.log(information);\r\n  });\r\n});\r\n// chrome.runtime.onMessage.addListener(\r\n//   (request, sender, sendResponse) => {\r\n//     if (request.message === \"get_current_tab_url\") {\r\n//       try {\r\n//         chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {\r\n//           if (!tabs || !tabs.length) {\r\n//             console.log(\"Error: No active tab found\");\r\n//             sendResponse({error: \"Error: No active tab found\"});\r\n//             return;\r\n//           }\r\n//           const url = tabs[0].url;\r\n//           if(!url) throw new Error(\"tabs[0].url is undefined\");\r\n//           // Check if the URL is valid\r\n//           const parsedUrl = new URL(url);\r\n//           try {\r\n//           // Check if the URL is an internal page\r\n//             if (parsedUrl.protocol !== \"https:\" && parsedUrl.protocol !== \"http:\") {\r\n//               throw new Error(`Cannot set cookie for internal page: ${url}`);\r\n//             } \r\n            \r\n//           } catch(err) {\r\n//             console.log(`Error handling response: ${err}`);\r\n//             sendResponse({error: err.message});\r\n//             return;\r\n//           }\r\n//           let responseData = {url, domain: parsedUrl.hostname};\r\n//           const sixMonthsInMilliseconds = 15778476000;\r\n//           const expirationDate = new Date(Date.now() + sixMonthsInMilliseconds);\r\n\r\n//           chrome.cookies.get({url: url, name: \"userId\"}, (cookie) => {\r\n//             let userId;\r\n//             if (cookie) {\r\n//               userId = cookie.value;\r\n//             } else {\r\n//               userId = uuidv4();\r\n//               // generate a new unique value here\r\n//             }\r\n//             responseData.userId = userId;\r\n//             console.log(cookie);\r\n//             // Set the cookie here\r\n//             chrome.cookies.set({\r\n//               url: url,\r\n//               name: \"userId\",\r\n//               value: userId,\r\n//               httpOnly: true,\r\n//               expirationDate: Math.floor(expirationDate.getTime()/1000),\r\n//               domain: parsedUrl.hostname\r\n//             }, async (cookie)=>{\r\n//               if (chrome.runtime.lastError) {\r\n//                 sendResponse({error: chrome.runtime.lastError.message});\r\n//                 console.log(chrome.runtime.lastError.message)\r\n//               }\r\n//               sendResponse(responseData);\r\n//             });\r\n//           });\r\n//         });\r\n//       } catch (error) {\r\n//         console.log(`Error handling response: ${error}`);\r\n//         sendResponse({error: error.message});\r\n//       }\r\n//     }\r\n//     return true; // Required for async message sending to close the message sending\r\n//   });\r\n"],"names":["email","chrome","runtime","onInstalled","addListener","identity","getProfileUserInfo","info","information","console","log","JSON","stringify"],"sourceRoot":""}