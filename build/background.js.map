{"version":3,"file":"background.js","mappings":"MAIA,IAAIA,EACJC,OAAOC,QAAQC,YAAYC,aAAY,WACrCH,OAAOI,SAASC,mBAAmB,CAAC,cAAiB,QAAQ,SAASC,GACpEP,EAAQO,EAAKP,MACb,IAAIQ,EAAc,CAAC,EACnBC,QAAQC,IAAIH,GACZC,EAAYG,KAAKC,UAAUL,GAC3BE,QAAQC,IAAIF,EACd,GACF,G","sources":["webpack://chrome-ext/./src/background.js"],"sourcesContent":["//import {v4 as uuidv4} from 'uuid';\n\n//fetch if user sync is not enabled by adding \"accountStatus\" param\n//may need to be inside try block for legacy chrome users - otherwise it returns empy object for non-synced accounts\nlet email;\nchrome.runtime.onInstalled.addListener(function () {\n  chrome.identity.getProfileUserInfo({'accountStatus': 'ANY'}, function(info) {\n    email = info.email;\n    let information = {};\n    console.log(info);\n    information=JSON.stringify(info);\n    console.log(information);\n  });\n});\n// chrome.runtime.onMessage.addListener(\n//   (request, sender, sendResponse) => {\n//     if (request.message === \"get_current_tab_url\") {\n//       try {\n//         chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {\n//           if (!tabs || !tabs.length) {\n//             console.log(\"Error: No active tab found\");\n//             sendResponse({error: \"Error: No active tab found\"});\n//             return;\n//           }\n//           const url = tabs[0].url;\n//           if(!url) throw new Error(\"tabs[0].url is undefined\");\n//           // Check if the URL is valid\n//           const parsedUrl = new URL(url);\n//           try {\n//           // Check if the URL is an internal page\n//             if (parsedUrl.protocol !== \"https:\" && parsedUrl.protocol !== \"http:\") {\n//               throw new Error(`Cannot set cookie for internal page: ${url}`);\n//             } \n            \n//           } catch(err) {\n//             console.log(`Error handling response: ${err}`);\n//             sendResponse({error: err.message});\n//             return;\n//           }\n//           let responseData = {url, domain: parsedUrl.hostname};\n//           const sixMonthsInMilliseconds = 15778476000;\n//           const expirationDate = new Date(Date.now() + sixMonthsInMilliseconds);\n\n//           chrome.cookies.get({url: url, name: \"userId\"}, (cookie) => {\n//             let userId;\n//             if (cookie) {\n//               userId = cookie.value;\n//             } else {\n//               userId = uuidv4();\n//               // generate a new unique value here\n//             }\n//             responseData.userId = userId;\n//             console.log(cookie);\n//             // Set the cookie here\n//             chrome.cookies.set({\n//               url: url,\n//               name: \"userId\",\n//               value: userId,\n//               httpOnly: true,\n//               expirationDate: Math.floor(expirationDate.getTime()/1000),\n//               domain: parsedUrl.hostname\n//             }, async (cookie)=>{\n//               if (chrome.runtime.lastError) {\n//                 sendResponse({error: chrome.runtime.lastError.message});\n//                 console.log(chrome.runtime.lastError.message)\n//               }\n//               sendResponse(responseData);\n//             });\n//           });\n//         });\n//       } catch (error) {\n//         console.log(`Error handling response: ${error}`);\n//         sendResponse({error: error.message});\n//       }\n//     }\n//     return true; // Required for async message sending to close the message sending\n//   });\n"],"names":["email","chrome","runtime","onInstalled","addListener","identity","getProfileUserInfo","info","information","console","log","JSON","stringify"],"sourceRoot":""}